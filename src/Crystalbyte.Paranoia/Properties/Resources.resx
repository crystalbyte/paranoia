<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AccountTestFailureMessage" xml:space="preserve">
    <value>Errors occurred during the configuration, you can correct any mistakes and try again.</value>
  </data>
  <data name="AccountTestSuccessMessage" xml:space="preserve">
    <value>Configuration finished successfully.</value>
  </data>
  <data name="AuthenticationFailedMessage" xml:space="preserve">
    <value>Auhentication failed.</value>
  </data>
  <data name="BackButtonText" xml:space="preserve">
    <value>Back</value>
  </data>
  <data name="CancelButtonText" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="ContinueButtonText" xml:space="preserve">
    <value>Continue</value>
  </data>
  <data name="CreateAccountConfigPageDescription" xml:space="preserve">
    <value>The properties below are required to provide access to your e-mail server.</value>
  </data>
  <data name="CreateAccountDescriptionText" xml:space="preserve">
    <value>This dialog will guide you through the steps necessary to add a connection to your email server.</value>
  </data>
  <data name="CreateAccountScreenTitle" xml:space="preserve">
    <value>Create New Account</value>
  </data>
  <data name="CreateAccountTestingPageDescription" xml:space="preserve">
    <value>The current configuration is now being tested.
If any of the tests fail, you may need to navigate back and correct any mistakes.</value>
  </data>
  <data name="CreateIdentitySubTitle" xml:space="preserve">
    <value>In order to get you started, it is required to create a unique identity.</value>
    <comment>IdentityScreen -&gt;Run</comment>
  </data>
  <data name="CreateIdentityTitle" xml:space="preserve">
    <value>Create New Identity</value>
    <comment>IdentityScreen -&gt;Run</comment>
  </data>
  <data name="EmailAddressDescription" xml:space="preserve">
    <value>Please enter the e-mail address associated with your e-mail account.</value>
  </data>
  <data name="EmailAddressWatermark" xml:space="preserve">
    <value>e-mail address</value>
    <comment>IdentityScreen -&gt; TextBlock -&gt; EmailAddressTextBlock</comment>
  </data>
  <data name="FinishButtonText" xml:space="preserve">
    <value>Finish</value>
  </data>
  <data name="IdentityPrivateDescription" xml:space="preserve">
    <value>The following properties are private and will be only visible to you.</value>
  </data>
  <data name="IdentityPublicDescription" xml:space="preserve">
    <value>These properties are public and will be visible to the people you communicate with.</value>
  </data>
  <data name="ImapHostWatermark" xml:space="preserve">
    <value>incoming host address (e.g. imap.gmail.com)</value>
  </data>
  <data name="ImapPasswordWatermark" xml:space="preserve">
    <value>incoming server password</value>
  </data>
  <data name="ImapPortWatermark" xml:space="preserve">
    <value>port (e.g. 993) ...</value>
  </data>
  <data name="ImapSectionHeaderText" xml:space="preserve">
    <value>Please enter or correct  the incoming server properties (IMAP).</value>
  </data>
  <data name="ImapSecurityWatermark" xml:space="preserve">
    <value>incoming security protocol (e.g. SSL)</value>
  </data>
  <data name="ImapTestFailureMessage" xml:space="preserve">
    <value>Failed to connect to server.</value>
  </data>
  <data name="ImapTestMessage" xml:space="preserve">
    <value>Attempting to connect to server ...</value>
  </data>
  <data name="ImapTestSuccessMessage" xml:space="preserve">
    <value>Connection to server successfully established.</value>
  </data>
  <data name="ImapUsernameWatermark" xml:space="preserve">
    <value>incoming server username</value>
  </data>
  <data name="InvalidEmailFormatErrorText" xml:space="preserve">
    <value>The value entered is not a valid email address.</value>
    <comment>IdentityScreenContext -&gt; EmailAddress</comment>
  </data>
  <data name="MaxStringLength64ErrorText" xml:space="preserve">
    <value>The text must not exceed 64 characters.</value>
    <comment>IdentityScreenContext -&gt; Name</comment>
  </data>
  <data name="NameRequiredErrorText" xml:space="preserve">
    <value>The name field must not be empty.</value>
    <comment>IdentityScreenContext -&gt; Name</comment>
  </data>
  <data name="NameWatermark" xml:space="preserve">
    <value>name</value>
    <comment>IdentityScreen -&gt; TextBlock -&gt; NameTextBlock</comment>
  </data>
  <data name="NetworkTestFailureMessage" xml:space="preserve">
    <value>Network not available.</value>
  </data>
  <data name="NetworkTestMessage" xml:space="preserve">
    <value>Checking network availability ...</value>
  </data>
  <data name="NetworkTestSuccessMessage" xml:space="preserve">
    <value>Network available.</value>
  </data>
  <data name="NotesWatermark" xml:space="preserve">
    <value>notes</value>
    <comment>IdentityScreen -&gt; TextBlock -&gt; NotesTextBlock</comment>
  </data>
  <data name="NullOrEmptyErrorText" xml:space="preserve">
    <value>This field must not be empty.</value>
    <comment>IdentityScreenContext -&gt; EmailAddress</comment>
  </data>
  <data name="PasswordDescription" xml:space="preserve">
    <value>Please enter the password associated with your e-mail account.</value>
  </data>
  <data name="PasswordRequiredErrorText" xml:space="preserve">
    <value>The password must not be empty.</value>
  </data>
  <data name="SmtpHostWatermark" xml:space="preserve">
    <value>outgoing host address (e.g. smtp.gmail.com)</value>
  </data>
  <data name="SmtpPasswordWatermark" xml:space="preserve">
    <value>outgoing server password</value>
  </data>
  <data name="SmtpSectionHeaderText" xml:space="preserve">
    <value>Please enter or correct  the outgoing server properties (SMTP).</value>
  </data>
  <data name="SmtpTestFailureMessage" xml:space="preserve">
    <value>Failed to send message ...</value>
  </data>
  <data name="SmtpTestMessage" xml:space="preserve">
    <value>Attempting to send test message ...</value>
  </data>
  <data name="SmtpTestMessageSubject" xml:space="preserve">
    <value>Test message</value>
  </data>
  <data name="SmtpTestSuccessMessage" xml:space="preserve">
    <value>Message successfully sent.</value>
  </data>
  <data name="SmtpUsernameWatermark" xml:space="preserve">
    <value>outgoing server username</value>
  </data>
</root>