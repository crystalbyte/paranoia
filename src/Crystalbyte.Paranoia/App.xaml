<Application x:Class="Crystalbyte.Paranoia.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:converters="clr-namespace:Crystalbyte.Paranoia.UI.Converters"
             xmlns:paranoia="clr-namespace:Crystalbyte.Paranoia"
             xmlns:properties="clr-namespace:Crystalbyte.Paranoia.Properties"
             xmlns:system="clr-namespace:System;assembly=mscorlib"
             xmlns:ui="clr-namespace:Crystalbyte.Paranoia.UI"
             StartupUri="MainWindow.xaml">
    <!--  Default styles: http://msdn.microsoft.com/en-us/library/aa970773.aspx  -->
    <!--  Icons: C:\Program Files (x86)\Microsoft SDKs\Windows Phone\v8.0\Icons  -->
    <Application.Resources>
        <ResourceDictionary>
            <converters:GravatarImageConverter x:Key="GravatarImageConverter" />
            <converters:MailboxLocalizer x:Key="MailboxLocalizer" />
            <converters:IgnoreLinebreaksConverter x:Key="IgnoreLinebreaksConverter" />

            <FontFamily x:Key="AppFontFamily">Segoe UI</FontFamily>

            <system:Double x:Key="AppExtraLargeFontSize">28</system:Double>
            <system:Double x:Key="AppLargeFontSize">22</system:Double>
            <system:Double x:Key="AppMediumFontSize">15</system:Double>
            <system:Double x:Key="AppNormalFontSize">12</system:Double>
            <system:Double x:Key="AppSmallFontSize">10</system:Double>
            <system:Double x:Key="AppExtraSmallFontSize">8</system:Double>

            <SolidColorBrush x:Key="{ComponentResourceKey TypeInTargetAssembly=paranoia:App, ResourceId=AppAccentBrush}" Color="BlueViolet" />
            <SolidColorBrush x:Key="{ComponentResourceKey TypeInTargetAssembly=paranoia:App, ResourceId=WindowButtonHoverBrush}" Color="#3E3E40" />

            <SolidColorBrush x:Key="AppDarkComboBoxBrush" Color="#282828" />
            <SolidColorBrush x:Key="AppLightTextBrush" Color="WhiteSmoke" />
            <SolidColorBrush x:Key="AppFailureColorBrush" Color="Red" />
            <SolidColorBrush x:Key="AppMediumTextBrush" Color="DimGray" />
            <SolidColorBrush x:Key="AppControlBrush" Color="DimGray" />
            <SolidColorBrush x:Key="AppDarkTextBrush" Color="#333" />
            <SolidColorBrush x:Key="AppLightControlBrush" Color="LightGray" />
            <SolidColorBrush x:Key="WindowBackgroundBrush" Color="#222222" />
            <SolidColorBrush x:Key="WindowLightBackgroundBrush" Color="#2A2A2C" />
            <SolidColorBrush x:Key="WindowButtonBorderBrush" Color="Transparent" />
            <SolidColorBrush x:Key="WindowButtonBackgroundBrush" Color="Transparent" />

            <SolidColorBrush x:Key="{ComponentResourceKey TypeInTargetAssembly=paranoia:App, ResourceId=WindowSearchTextBrush}" Color="DimGray" />
            <Style x:Key="{ComponentResourceKey TypeInTargetAssembly=paranoia:App, ResourceId=WindowTitleStyle}" TargetType="TextBlock">
                <Setter Property="FontSize" Value="14" />
            </Style>

            <Style x:Key="WindowButtonStyle" TargetType="ButtonBase">
                <Setter Property="WindowChrome.IsHitTestVisibleInChrome" Value="True" />
                <Setter Property="BorderThickness" Value="0" />
                <Setter Property="BorderBrush" Value="{StaticResource WindowButtonBorderBrush}" />
                <Setter Property="Background" Value="{StaticResource WindowButtonBackgroundBrush}" />
                <Setter Property="Margin" Value="0" />
                <Setter Property="Width" Value="Auto" />
                <Setter Property="Height" Value="Auto" />
                <Setter Property="Padding" Value="0" />
                <Setter Property="HorizontalContentAlignment" Value="Center" />
                <Setter Property="VerticalContentAlignment" Value="Center" />
                <Setter Property="SnapsToDevicePixels" Value="True" />
                <Setter Property="Foreground" Value="{Binding Foreground, RelativeSource={RelativeSource FindAncestor, AncestorType=ui:MetroWindow, AncestorLevel=1}}" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="ButtonBase">
                            <Border Margin="{TemplateBinding Margin}"
                                    Background="{TemplateBinding Background}"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="{TemplateBinding BorderThickness}"
                                    Padding="{TemplateBinding Padding}">
                                <Grid>
                                    <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                                </Grid>
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Style.Triggers>
                    <Trigger Property="IsEnabled" Value="False">
                        <Setter Property="Foreground" Value="{StaticResource AppDarkTextBrush}" />
                        <Setter Property="BorderBrush" Value="{StaticResource AppDarkTextBrush}" />
                    </Trigger>
                    <MultiTrigger>
                        <MultiTrigger.Conditions>
                            <Condition Property="IsPressed" Value="True" />
                            <Condition Property="IsMouseOver" Value="True" />
                        </MultiTrigger.Conditions>
                        <Setter Property="Background" Value="{Binding AccentBrush, RelativeSource={RelativeSource FindAncestor, AncestorType=ui:MetroWindow, AncestorLevel=1}}" />
                    </MultiTrigger>
                    <MultiTrigger>
                        <MultiTrigger.Conditions>
                            <Condition Property="IsMouseOver" Value="True" />
                            <Condition Property="IsPressed" Value="False" />
                        </MultiTrigger.Conditions>
                        <Setter Property="Background" Value="{Binding HoverBrush, RelativeSource={RelativeSource FindAncestor, AncestorType=ui:MetroWindow, AncestorLevel=1}}" />
                    </MultiTrigger>
                </Style.Triggers>
            </Style>

            <Style x:Key="WindowCommandButtonStyle"
                   BasedOn="{StaticResource WindowButtonStyle}"
                   TargetType="ButtonBase">
                <Setter Property="VerticalAlignment" Value="Top" />
                <Setter Property="Width" Value="32" />
                <Setter Property="Height" Value="24" />
            </Style>

            <Style x:Key="{ComponentResourceKey TypeInTargetAssembly=paranoia:App,
                                                ResourceId=MinimizeButtonStyle}"
                   BasedOn="{StaticResource WindowCommandButtonStyle}"
                   TargetType="ButtonBase">
                <Setter Property="Command" Value="{x:Static ui:WindowCommands.Minimize}" />
                <Setter Property="ToolTip" Value="{x:Static properties:Resources.MinimizeCommandTooltip}" />
                <Setter Property="ContentTemplate">
                    <Setter.Value>
                        <DataTemplate>
                            <Image Width="10"
                                   Height="10"
                                   HorizontalAlignment="Center"
                                   VerticalAlignment="Center"
                                   Source="/Assets/minimize.png" />
                        </DataTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="{ComponentResourceKey TypeInTargetAssembly=paranoia:App,
                                                ResourceId=MaximizeButtonStyle}"
                   BasedOn="{StaticResource WindowCommandButtonStyle}"
                   TargetType="ButtonBase">
                <Setter Property="Command" Value="{x:Static ui:WindowCommands.Maximize}" />
                <Setter Property="ToolTip" Value="{x:Static properties:Resources.MaximizeCommandTooltip}" />
                <Setter Property="ContentTemplate">
                    <Setter.Value>
                        <DataTemplate>
                            <Image Width="10"
                                   Height="10"
                                   HorizontalAlignment="Center"
                                   VerticalAlignment="Center"
                                   Source="/Assets/maximize.png"
                                   Stretch="Uniform" />
                        </DataTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="{ComponentResourceKey TypeInTargetAssembly=paranoia:App,
                                                ResourceId=RestoreDownButtonStyle}"
                   BasedOn="{StaticResource WindowCommandButtonStyle}"
                   TargetType="ButtonBase">
                <Setter Property="Command" Value="{x:Static ui:WindowCommands.RestoreDown}" />
                <Setter Property="ToolTip" Value="{x:Static properties:Resources.RestoreDownCommandTooltip}" />
                <Setter Property="ContentTemplate">
                    <Setter.Value>
                        <DataTemplate>
                            <Image Width="10"
                                   Height="10"
                                   HorizontalAlignment="Center"
                                   VerticalAlignment="Center"
                                   Source="/Assets/restore.png"
                                   Stretch="Uniform" />
                        </DataTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="{ComponentResourceKey TypeInTargetAssembly=paranoia:App,
                                                ResourceId=CloseButtonStyle}"
                   BasedOn="{StaticResource WindowCommandButtonStyle}"
                   TargetType="ButtonBase">
                <Setter Property="Command" Value="{x:Static ApplicationCommands.Close}" />
                <Setter Property="ToolTip" Value="{x:Static properties:Resources.CloseCommandTooltip}" />
                <Setter Property="ContentTemplate">
                    <Setter.Value>
                        <DataTemplate>
                            <Image Width="10"
                                   Height="10"
                                   HorizontalAlignment="Center"
                                   VerticalAlignment="Center"
                                   Source="/Assets/close.png"
                                   Stretch="Uniform" />
                        </DataTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="{ComponentResourceKey TypeInTargetAssembly=paranoia:App,
                                                ResourceId=HelpButtonStyle}"
                   BasedOn="{StaticResource WindowCommandButtonStyle}"
                   TargetType="ButtonBase">
                <Setter Property="Command" Value="{x:Static ApplicationCommands.Help}" />
                <Setter Property="ContentTemplate">
                    <Setter.Value>
                        <DataTemplate>
                            <Image Height="10"
                                   HorizontalAlignment="Center"
                                   VerticalAlignment="Center"
                                   Source="/Assets/help.png"
                                   Stretch="Uniform" />
                        </DataTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <ControlTemplate x:Key="ValidationErrorTemplate">
                <Grid>
                    <Polygon Margin="3"
                             HorizontalAlignment="Right"
                             VerticalAlignment="Bottom"
                             Fill="{StaticResource AppFailureColorBrush}"
                             IsHitTestVisible="False"
                             Points="10,0 10,10 0,10" />
                    <AdornedElementPlaceholder />
                </Grid>
            </ControlTemplate>

            <Style x:Key="AppNormalTextStyle" TargetType="{x:Type TextBlock}">
                <Setter Property="TextWrapping" Value="Wrap" />
                <Setter Property="RenderOptions.ClearTypeHint" Value="Enabled" />
                <Setter Property="FontFamily" Value="{StaticResource AppFontFamily}" />
                <Setter Property="Foreground" Value="{StaticResource AppLightTextBrush}" />
            </Style>

            <Style x:Key="AppErrorTextStyle" TargetType="{x:Type TextBlock}">
                <Setter Property="FontFamily" Value="{StaticResource AppFontFamily}" />
                <Setter Property="Foreground" Value="{StaticResource AppFailureColorBrush}" />
            </Style>

            <Style x:Key="AppLightTextStyle"
                   BasedOn="{StaticResource AppNormalTextStyle}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="FontWeight" Value="Thin" />
            </Style>

            <Style x:Key="AppWatermarkTextStyle"
                   BasedOn="{StaticResource AppNormalTextStyle}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="Foreground" Value="{StaticResource AppMediumTextBrush}" />
                <Setter Property="FontStyle" Value="Italic" />
                <Setter Property="Padding" Value="5,3,3,3" />
            </Style>

            <Style x:Key="AppTitleTextStyle"
                   BasedOn="{StaticResource AppLightTextStyle}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="FontSize" Value="{StaticResource AppLargeFontSize}" />
            </Style>

            <Style x:Key="AppSubtitleTextStyle"
                   BasedOn="{StaticResource AppLightTextStyle}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="Foreground" Value="{StaticResource AppMediumTextBrush}" />
                <Setter Property="FontSize" Value="{StaticResource AppMediumFontSize}" />
            </Style>

            <Style TargetType="{x:Type TextBox}">
                <Setter Property="Validation.ErrorTemplate" Value="{StaticResource ValidationErrorTemplate}" />
                <Setter Property="BorderBrush" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly=paranoia:App, ResourceId=AppAccentBrush}}" />
                <Setter Property="Background" Value="{StaticResource AppControlBrush}" />
                <Setter Property="FontFamily" Value="{StaticResource AppFontFamily}" />
                <Setter Property="VerticalAlignment" Value="Center" />
                <Setter Property="Foreground" Value="{StaticResource AppLightTextBrush}" />
                <Setter Property="Padding" Value="3" />
                <Setter Property="Margin" Value="0,3,0,3" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type TextBox}">
                            <Border x:Name="border"
                                    Background="{TemplateBinding Background}"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="{TemplateBinding BorderThickness}"
                                    SnapsToDevicePixels="True">
                                <ScrollViewer x:Name="PART_ContentHost"
                                              Margin="{TemplateBinding Padding}"
                                              Focusable="False"
                                              HorizontalScrollBarVisibility="Hidden"
                                              VerticalScrollBarVisibility="Hidden" />
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter TargetName="border" Property="Opacity" Value="0.56" />
                                </Trigger>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter TargetName="border" Property="BorderBrush" Value="#FF7EB4EA" />
                                </Trigger>
                                <Trigger Property="IsKeyboardFocused" Value="True">
                                    <Setter TargetName="border" Property="BorderBrush" Value="#FF569DE5" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Style.Triggers>
                    <Trigger Property="Validation.HasError" Value="True">
                        <Setter Property="ToolTip" Value="{Binding (Validation.Errors)[0].ErrorContent, RelativeSource={x:Static RelativeSource.Self}}" />
                    </Trigger>
                </Style.Triggers>
            </Style>

            <Style x:Key="{ComponentResourceKey TypeInTargetAssembly=paranoia:App,
                                                ResourceId=WindowTextBoxStyle}"
                   BasedOn="{StaticResource {x:Type TextBox}}"
                   TargetType="TextBox">
                <Setter Property="FontSize" Value="{StaticResource AppNormalFontSize}" />
                <Setter Property="Padding" Value="1" />
                <Setter Property="Margin" Value="0" />
                <Setter Property="Width" Value="200" />
                <Setter Property="WindowChrome.IsHitTestVisibleInChrome" Value="True" />
                <Setter Property="BorderBrush" Value="#333333" />
                <Setter Property="Background" Value="#222222" />
            </Style>

            <Style x:Key="AppDialogTextButtonStyle" TargetType="{x:Type Button}">
                <Setter Property="HorizontalContentAlignment" Value="Center" />
                <Setter Property="VerticalContentAlignment" Value="Center" />
                <Setter Property="SnapsToDevicePixels" Value="True" />
                <Setter Property="Foreground" Value="{StaticResource AppLightTextBrush}" />
                <Setter Property="Background" Value="Transparent" />
                <Setter Property="BorderThickness" Value="1" />
                <Setter Property="MinWidth" Value="100" />
                <Setter Property="BorderBrush" Value="WhiteSmoke" />
                <Setter Property="Padding" Value="3,4,3,4" />
                <Setter Property="Margin" Value="0,3,3,3" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Grid Margin="{TemplateBinding Margin}">
                                <Border HorizontalAlignment="{TemplateBinding HorizontalAlignment}"
                                        VerticalAlignment="{TemplateBinding VerticalAlignment}"
                                        Background="{TemplateBinding Background}"
                                        Padding="{TemplateBinding Padding}">
                                    <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                                </Border>
                                <Rectangle x:Name="Border"
                                           HorizontalAlignment="{TemplateBinding HorizontalAlignment}"
                                           VerticalAlignment="{TemplateBinding VerticalAlignment}"
                                           Fill="Transparent"
                                           Opacity="1"
                                           Stroke="{TemplateBinding BorderBrush}"
                                           StrokeThickness="{TemplateBinding BorderThickness}" />
                                <Rectangle x:Name="FocusIndicator"
                                           HorizontalAlignment="{TemplateBinding HorizontalAlignment}"
                                           VerticalAlignment="{TemplateBinding VerticalAlignment}"
                                           Fill="Transparent"
                                           Opacity="1"
                                           Stroke="#FF569DE5"
                                           StrokeThickness="{TemplateBinding BorderThickness}" />
                            </Grid>

                            <ControlTemplate.Triggers>
                                <Trigger Property="IsFocused" Value="True">
                                    <Setter TargetName="FocusIndicator" Property="Visibility" Value="Visible" />
                                    <Setter TargetName="Border" Property="Visibility" Value="Collapsed" />
                                </Trigger>

                                <Trigger Property="IsFocused" Value="False">
                                    <Setter TargetName="FocusIndicator" Property="Visibility" Value="Collapsed" />
                                    <Setter TargetName="Border" Property="Visibility" Value="Visible" />
                                </Trigger>

                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter Property="Foreground" Value="{StaticResource AppDarkTextBrush}" />
                                    <Setter Property="BorderBrush" Value="{StaticResource AppDarkTextBrush}" />
                                </Trigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsPressed" Value="True" />
                                        <Condition Property="IsMouseOver" Value="True" />
                                    </MultiTrigger.Conditions>
                                    <Setter Property="Background" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly=paranoia:App, ResourceId=AppAccentBrush}}" />
                                </MultiTrigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsMouseOver" Value="True" />
                                        <Condition Property="IsPressed" Value="False" />
                                    </MultiTrigger.Conditions>
                                    <Setter Property="Background" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly=paranoia:App, ResourceId=AppAccentBrush}}" />
                                </MultiTrigger>
                            </ControlTemplate.Triggers>

                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>


            <Style x:Key="AppDefaultDialogTextButtonStyle"
                   BasedOn="{StaticResource AppDialogTextButtonStyle}"
                   TargetType="{x:Type Button}">
                <Setter Property="BorderBrush" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly=paranoia:App, ResourceId=AppAccentBrush}}" />
            </Style>

            <Style x:Key="AvatarListViewItemStyle" TargetType="{x:Type ListViewItem}">
                <Setter Property="HorizontalContentAlignment" Value="Stretch" />
                <Setter Property="VerticalContentAlignment" Value="Stretch" />
                <Setter Property="SnapsToDevicePixels" Value="True" />
                <Setter Property="OverridesDefaultStyle" Value="True" />
                <Setter Property="Background" Value="Transparent" />
                <Setter Property="WindowChrome.IsHitTestVisibleInChrome" Value="True" />
                <Setter Property="Padding" Value="0" />
                <Setter Property="Margin" Value="0" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ListViewItem}">
                            <Border x:Name="Border"
                                    Margin="{TemplateBinding Margin}"
                                    Background="{TemplateBinding Background}"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="{TemplateBinding BorderThickness}"
                                    Padding="{TemplateBinding Padding}"
                                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                                <Grid>
                                    <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                                    <Grid x:Name="SelectionBorder">
                                        <Border Background="Transparent"
                                                BorderBrush="{DynamicResource {ComponentResourceKey TypeInTargetAssembly=paranoia:App,
                                                                                                    ResourceId=AppAccentBrush}}"
                                                BorderThickness="1,0,1,1" />
                                        <Polygon HorizontalAlignment="Right"
                                                 Fill="{DynamicResource {ComponentResourceKey TypeInTargetAssembly=paranoia:App,
                                                                                              ResourceId=AppAccentBrush}}"
                                                 Points="0 0 16 0 16 16" />
                                        <Polyline Margin="0,0,2,0"
                                                  HorizontalAlignment="Right"
                                                  Points="0 5 3 7 6 2"
                                                  Stroke="White"
                                                  StrokeThickness="1.5" />
                                    </Grid>
                                    <Grid x:Name="MouseOverIndicator">
                                        <Border Background="Transparent"
                                                BorderBrush="{DynamicResource {ComponentResourceKey TypeInTargetAssembly=paranoia:App,
                                                                                                    ResourceId=AppAccentBrush}}"
                                                BorderThickness="1,0,1,1" />
                                        <Border Background="{DynamicResource {ComponentResourceKey TypeInTargetAssembly=paranoia:App,
                                                                                                   ResourceId=AppAccentBrush}}"
                                                BorderBrush="Transparent"
                                                BorderThickness="1"
                                                Opacity=".2" />
                                    </Grid>
                                </Grid>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsSelected" Value="True">
                                    <Setter TargetName="SelectionBorder" Property="Visibility" Value="Visible" />
                                </Trigger>
                                <Trigger Property="IsSelected" Value="False">
                                    <Setter TargetName="SelectionBorder" Property="Visibility" Value="Collapsed" />
                                </Trigger>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter TargetName="MouseOverIndicator" Property="Visibility" Value="Visible" />
                                </Trigger>
                                <Trigger Property="IsMouseOver" Value="False">
                                    <Setter TargetName="MouseOverIndicator" Property="Visibility" Value="Collapsed" />
                                </Trigger>
                                <Trigger Property="IsSelected" Value="true">
                                    <Setter TargetName="Border" Property="Background" Value="#DDDDDD" />
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="false">
                                    <Setter Property="Foreground" Value="#888888" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="AvatarListViewStyle" TargetType="{x:Type ListView}">
                <Setter Property="Height" Value="48" />
                <Setter Property="SnapsToDevicePixels" Value="true" />
                <Setter Property="VerticalAlignment" Value="Top" />
                <Setter Property="OverridesDefaultStyle" Value="true" />
                <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
                <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
                <Setter Property="ScrollViewer.CanContentScroll" Value="true" />
                <Setter Property="VerticalContentAlignment" Value="Center" />
                <Setter Property="BorderThickness" Value="0" />
                <Setter Property="SelectionMode" Value="Single" />
                <Setter Property="BorderBrush" Value="#888888" />
                <Setter Property="ItemContainerStyle" Value="{StaticResource AvatarListViewItemStyle}" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ListView}">
                            <Border x:Name="Border"
                                    Background="{TemplateBinding Background}"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="{TemplateBinding BorderThickness}">
                                <ItemsPresenter />
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsGrouping" Value="true">
                                    <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="false">
                                    <Setter TargetName="Border" Property="Background" Value="#AAAAAA" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style TargetType="{x:Type PasswordBox}">
                <Setter Property="PasswordChar" Value="●" />
                <Setter Property="BorderBrush" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly=paranoia:App, ResourceId=AppAccentBrush}}" />
                <Setter Property="Background" Value="{StaticResource AppControlBrush}" />
                <Setter Property="VerticalAlignment" Value="Center" />
                <Setter Property="Foreground" Value="{StaticResource AppLightTextBrush}" />
                <Setter Property="Padding" Value="3" />
                <Setter Property="Margin" Value="0,3,0,3" />
                <Setter Property="KeyboardNavigation.TabNavigation" Value="None" />
                <Setter Property="HorizontalContentAlignment" Value="Left" />
                <Setter Property="FocusVisualStyle" Value="{x:Null}" />
                <Setter Property="AllowDrop" Value="True" />
                <Setter Property="Validation.ErrorTemplate" Value="{StaticResource ValidationErrorTemplate}" />
                <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst" />
                <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type PasswordBox}">
                            <Border x:Name="border"
                                    Background="{TemplateBinding Background}"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="{TemplateBinding BorderThickness}"
                                    Padding="{TemplateBinding Padding}"
                                    SnapsToDevicePixels="True">
                                <ScrollViewer x:Name="PART_ContentHost"
                                              Margin="1,2,1,1"
                                              Focusable="False"
                                              HorizontalScrollBarVisibility="Hidden"
                                              SnapsToDevicePixels="True"
                                              VerticalScrollBarVisibility="Hidden" />
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter TargetName="border" Property="Opacity" Value="0.56" />
                                </Trigger>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter TargetName="border" Property="BorderBrush" Value="#FF7EB4EA" />
                                </Trigger>
                                <Trigger Property="IsKeyboardFocused" Value="True">
                                    <Setter TargetName="border" Property="BorderBrush" Value="#FF569DE5" />
                                </Trigger>
                                <Trigger Property="Validation.HasError" Value="True">
                                    <Setter Property="ToolTip" Value="{Binding (Validation.Errors)[0].ErrorContent, RelativeSource={x:Static RelativeSource.Self}}" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Style.Triggers>
                    <MultiTrigger>
                        <MultiTrigger.Conditions>
                            <Condition Property="IsInactiveSelectionHighlightEnabled" Value="True" />
                            <Condition Property="IsSelectionActive" Value="False" />
                        </MultiTrigger.Conditions>
                        <Setter Property="SelectionBrush" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}" />
                    </MultiTrigger>
                </Style.Triggers>
            </Style>

            <Style TargetType="{x:Type ProgressBar}">
                <Setter Property="Foreground" Value="#FF06B025" />
                <Setter Property="Background" Value="#FFE6E6E6" />
                <Setter Property="BorderBrush" Value="#FFBCBCBC" />
                <Setter Property="Height" Value="2" />
                <Setter Property="BorderThickness" Value="0" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ProgressBar}">
                            <Grid x:Name="TemplateRoot">
                                <VisualStateManager.VisualStateGroups>
                                    <VisualStateGroup x:Name="CommonStates">
                                        <VisualState x:Name="Determinate" />
                                        <VisualState x:Name="Indeterminate">
                                            <Storyboard RepeatBehavior="Forever">
                                                <DoubleAnimationUsingKeyFrames Storyboard.TargetName="Animation" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)">
                                                    <EasingDoubleKeyFrame KeyTime="0" Value="0.25" />
                                                    <EasingDoubleKeyFrame KeyTime="0:0:1" Value="0.25" />
                                                    <EasingDoubleKeyFrame KeyTime="0:0:2" Value="0.25" />
                                                </DoubleAnimationUsingKeyFrames>
                                                <PointAnimationUsingKeyFrames Storyboard.TargetName="Animation" Storyboard.TargetProperty="(UIElement.RenderTransformOrigin)">
                                                    <EasingPointKeyFrame KeyTime="0" Value="-0.5,0.5" />
                                                    <EasingPointKeyFrame KeyTime="0:0:1" Value="0.5,0.5" />
                                                    <EasingPointKeyFrame KeyTime="0:0:2" Value="1.5,0.5" />
                                                </PointAnimationUsingKeyFrames>
                                            </Storyboard>
                                        </VisualState>
                                    </VisualStateGroup>
                                </VisualStateManager.VisualStateGroups>
                                <Border Background="{TemplateBinding Background}"
                                        BorderBrush="{TemplateBinding BorderBrush}"
                                        BorderThickness="{TemplateBinding BorderThickness}" />
                                <Rectangle x:Name="PART_Track"
                                           Height="{TemplateBinding Height}"
                                           Fill="{TemplateBinding Background}" />
                                <Grid x:Name="PART_Indicator"
                                      HorizontalAlignment="Left"
                                      ClipToBounds="True">
                                    <Rectangle x:Name="Indicator" Fill="{TemplateBinding Foreground}" />
                                    <Rectangle x:Name="Animation"
                                               Fill="{TemplateBinding Foreground}"
                                               RenderTransformOrigin="0.5,0.5">
                                        <Rectangle.RenderTransform>
                                            <TransformGroup>
                                                <ScaleTransform />
                                                <SkewTransform />
                                                <RotateTransform />
                                                <TranslateTransform />
                                            </TransformGroup>
                                        </Rectangle.RenderTransform>
                                    </Rectangle>
                                </Grid>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="Orientation" Value="Vertical">
                                    <Setter TargetName="TemplateRoot" Property="LayoutTransform">
                                        <Setter.Value>
                                            <RotateTransform Angle="-90" />
                                        </Setter.Value>
                                    </Setter>
                                </Trigger>
                                <Trigger Property="IsIndeterminate" Value="True">
                                    <Setter TargetName="Indicator" Property="Visibility" Value="Collapsed" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style TargetType="{x:Type ComboBox}">
                <Setter Property="Width" Value="200" />
                <Setter Property="HorizontalAlignment" Value="Right" />
                <Setter Property="VerticalAlignment" Value="Top" />
                <Setter Property="WindowChrome.IsHitTestVisibleInChrome" Value="True" />
            </Style>

        </ResourceDictionary>
    </Application.Resources>
</Application>