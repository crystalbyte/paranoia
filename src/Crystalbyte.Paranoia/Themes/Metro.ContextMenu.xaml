<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <Style x:Key="{x:Static MenuItem.SeparatorStyleKey}" TargetType="Separator">
        <Setter Property="Margin" Value="0,2.2,0,2.2" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Separator">
                    <Rectangle Height="1"
                               Margin="34,0,0,0"
                               HorizontalAlignment="Stretch"
                               Fill="#333337"
                               RenderOptions.EdgeMode="Aliased"
                               StrokeThickness="0" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  TopLevelHeader  -->

    <ControlTemplate x:Key="{x:Static MenuItem.TopLevelHeaderTemplateKey}" TargetType="MenuItem">
        <Border Name="Border" Padding="{TemplateBinding Padding}">
            <Grid>
                <ContentPresenter Margin="6,3,6,3"
                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                  ContentSource="Header"
                                  RecognizesAccessKey="True" />
                <Popup Name="Popup"
                       AllowsTransparency="True"
                       Focusable="False"
                       IsOpen="{TemplateBinding IsSubmenuOpen}"
                       Placement="Bottom"
                       PopupAnimation="Fade">
                    <Border Name="SubmenuBorder"
                            Background="{DynamicResource Metro.MenuBackgroundBrush}"
                            BorderBrush="{DynamicResource Metro.ControlBorderBrush}"
                            BorderThickness="1"
                            SnapsToDevicePixels="True">
                        <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle" />
                    </Border>
                </Popup>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsSuspendingPopupAnimation" Value="true">
                <Setter TargetName="Popup" Property="PopupAnimation" Value="None" />
            </Trigger>
            <Trigger Property="IsHighlighted" Value="true">
                <Setter TargetName="Border" Property="Background" Value="{DynamicResource Metro.NormalTextBrush}" />
                <Setter TargetName="Border" Property="BorderBrush" Value="Transparent" />
            </Trigger>
            <Trigger SourceName="Popup" Property="Popup.AllowsTransparency" Value="True">
                <Setter TargetName="SubmenuBorder" Property="Padding" Value="0,0,0,3" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource Metro.DisabledBrush}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!--  TopLevelItem  -->

    <ControlTemplate x:Key="{x:Static MenuItem.TopLevelItemTemplateKey}" TargetType="MenuItem">
        <Border Name="Border">
            <Grid>
                <ContentPresenter Margin="6,3,6,3"
                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                  ContentSource="Header"
                                  RecognizesAccessKey="True" />
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsHighlighted" Value="true">
                <Setter TargetName="Border" Property="Background" Value="{DynamicResource Metro.NormalTextBrush}" />
                <Setter TargetName="Border" Property="BorderBrush" Value="Transparent" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource Metro.DisabledBrush}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!--  SubmenuItem  -->

    <ControlTemplate x:Key="{x:Static MenuItem.SubmenuItemTemplateKey}" TargetType="MenuItem">
        <Border Name="Border" Padding="{TemplateBinding Padding}">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" SharedSizeGroup="Icon" />
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="Auto" SharedSizeGroup="Shortcut" />
                    <ColumnDefinition Width="13" />
                </Grid.ColumnDefinitions>
                <Rectangle Grid.Column="0"
                           Grid.ColumnSpan="4"
                           HorizontalAlignment="Stretch"
                           VerticalAlignment="Stretch"
                           Fill="Transparent" />
                <ContentPresenter Name="Icon"
                                  Grid.Column="0"
                                  Margin="3,0,6,0"
                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                  ContentSource="Icon" />
                <Border Name="Check"
                        Grid.Column="0"
                        Width="13"
                        Height="13"
                        Margin="6,0,6,0"
                        Background="{DynamicResource Metro.NormalTextBrush}"
                        BorderBrush="{DynamicResource Metro.ControlBorderBrush}"
                        BorderThickness="1"
                        Visibility="Collapsed">
                    <Path Name="CheckMark"
                          Width="7"
                          Height="7"
                          Data="M 0 0 L 7 7 M 0 7 L 7 0"
                          SnapsToDevicePixels="False"
                          Stroke="{DynamicResource Metro.DisabledBrush}"
                          StrokeThickness="2"
                          Visibility="Hidden" />
                </Border>
                <ContentPresenter Name="HeaderHost"
                                  Grid.Column="1"
                                  VerticalAlignment="Center"
                                  ContentSource="Header"
                                  RecognizesAccessKey="True" />
                <TextBlock x:Name="InputGestureText"
                           Grid.Column="2"
                           Margin="5,0,0,0"
                           VerticalAlignment="Center"
                           DockPanel.Dock="Right"
                           FontSize="{DynamicResource Metro.SmallFontSize}"
                           RenderOptions.ClearTypeHint="Enabled"
                           Text="{TemplateBinding InputGestureText}" />
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="Icon" Value="{x:Null}">
                <Setter TargetName="Icon" Property="Visibility" Value="Hidden" />
            </Trigger>
            <Trigger Property="IsChecked" Value="true">
                <Setter TargetName="CheckMark" Property="Visibility" Value="Visible" />
            </Trigger>
            <Trigger Property="IsCheckable" Value="true">
                <Setter TargetName="Check" Property="Visibility" Value="Visible" />
                <Setter TargetName="Icon" Property="Visibility" Value="Hidden" />
            </Trigger>
            <Trigger Property="IsHighlighted" Value="true">
                <Setter TargetName="Border" Property="Background" Value="{DynamicResource Metro.HoverBrush}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Foreground" Value="{DynamicResource Metro.DisabledBrush}" />
                <Setter TargetName="Icon" Property="Opacity" Value=".3" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!--  SubmenuHeader  -->

    <ControlTemplate x:Key="{x:Static MenuItem.SubmenuHeaderTemplateKey}" TargetType="MenuItem">
        <Border Name="Border" Padding="{TemplateBinding Padding}">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" SharedSizeGroup="Icon" />
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="Auto" SharedSizeGroup="Shortcut" />
                    <ColumnDefinition Width="13" />
                </Grid.ColumnDefinitions>
                <Rectangle Grid.Column="0"
                           Grid.ColumnSpan="4"
                           HorizontalAlignment="Stretch"
                           VerticalAlignment="Stretch"
                           Fill="Transparent" />
                <ContentPresenter Name="Icon"
                                  Grid.Column="0"
                                  Margin="3,0,6,0"
                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                  ContentSource="Icon" />
                <ContentPresenter Name="HeaderHost"
                                  Grid.Column="1"
                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                  ContentSource="Header"
                                  RecognizesAccessKey="True" />
                <TextBlock x:Name="InputGestureText"
                           Grid.Column="2"
                           Margin="5,0,0,0"
                           DockPanel.Dock="Right"
                           FontSize="{DynamicResource Metro.SmallFontSize}"
                           RenderOptions.ClearTypeHint="Enabled"
                           Text="{TemplateBinding InputGestureText}" />
                <Path Grid.Column="3"
                      HorizontalAlignment="Center"
                      VerticalAlignment="Center"
                      Data="M 0 0 L 0 7 L 4 3.5 Z"
                      Fill="{DynamicResource Metro.NormalTextBrush}" />
                <Popup Name="Popup"
                       Grid.Column="0"
                       AllowsTransparency="True"
                       Focusable="False"
                       HorizontalOffset="-4"
                       IsOpen="{TemplateBinding IsSubmenuOpen}"
                       Placement="Right"
                       PopupAnimation="Fade">
                    <Border Name="SubmenuBorder"
                            Background="{DynamicResource Metro.MenuBackgroundBrush}"
                            BorderBrush="{DynamicResource Metro.ControlBorderBrush}"
                            BorderThickness="1"
                            SnapsToDevicePixels="True">
                        <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle" />
                    </Border>
                </Popup>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="Icon" Value="{x:Null}">
                <Setter TargetName="Icon" Property="Visibility" Value="Collapsed" />
            </Trigger>
            <Trigger Property="IsHighlighted" Value="true">
                <Setter TargetName="Border" Property="Background" Value="{DynamicResource Metro.HoverBrush}" />
            </Trigger>
            <Trigger SourceName="Popup" Property="Popup.AllowsTransparency" Value="True">
                <Setter TargetName="SubmenuBorder" Property="Padding" Value="2" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Foreground" Value="{DynamicResource Metro.DisabledBrush}" />
                <Setter TargetName="Icon" Property="Opacity" Value=".3" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style TargetType="MenuItem">
        <Setter Property="Padding" Value="3" />
        <Setter Property="FontWeight" Value="Normal" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Style.Triggers>
            <Trigger Property="Role" Value="TopLevelHeader">
                <Setter Property="Template" Value="{StaticResource {x:Static MenuItem.TopLevelHeaderTemplateKey}}" />
                <Setter Property="Grid.IsSharedSizeScope" Value="true" />
            </Trigger>
            <Trigger Property="Role" Value="TopLevelItem">
                <Setter Property="Template" Value="{StaticResource {x:Static MenuItem.TopLevelItemTemplateKey}}" />
            </Trigger>
            <Trigger Property="Role" Value="SubmenuHeader">
                <Setter Property="Template" Value="{StaticResource {x:Static MenuItem.SubmenuHeaderTemplateKey}}" />
            </Trigger>
            <Trigger Property="Role" Value="SubmenuItem">
                <Setter Property="Template" Value="{StaticResource {x:Static MenuItem.SubmenuItemTemplateKey}}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="ContextMenu">
        <Setter Property="UseLayoutRounding" Value="True" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Grid.IsSharedSizeScope" Value="true" />
        <Setter Property="HasDropShadow" Value="True" />
        <Setter Property="FontWeight" Value="Normal" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ContextMenu">
                    <Border x:Name="Border"
                            Background="{DynamicResource Metro.MenuBackgroundBrush}"
                            BorderBrush="{DynamicResource Metro.ControlBorderBrush}"
                            BorderThickness="1">
                        <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasDropShadow" Value="true">
                            <Setter TargetName="Border" Property="Padding" Value="2" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


</ResourceDictionary>