<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:properties="clr-namespace:Crystalbyte.Paranoia.Properties"
                    xmlns:themes="clr-namespace:Crystalbyte.Paranoia.Themes;assembly=Crystalbyte.Paranoia.Themes"
                    xmlns:ui="clr-namespace:Crystalbyte.Paranoia.UI">

    <Style TargetType="Button">
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static themes:ThemeResourceKeys.ButtonBorderBrushKey}}" />
        <Setter Property="Background" Value="{DynamicResource {x:Static themes:ThemeResourceKeys.ButtonBackgroundBrushKey}}" />
        <Setter Property="Margin" Value="3" />
        <Setter Property="MinWidth" Value="16" />
        <Setter Property="MinHeight" Value="16" />
        <Setter Property="Width" Value="Auto" />
        <Setter Property="Height" Value="Auto" />
        <Setter Property="Padding" Value="5" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static themes:ThemeResourceKeys.AppForegroundBrushKey}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ButtonBase">
                    <Border x:Name="OuterBorder"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">
                        <Grid>
                            <Rectangle x:Name="HoverArea"
                                       Fill="Transparent"
                                       Opacity=".2" />
                            <ContentPresenter x:Name="ContentPresenter"
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="ContentPresenter" Property="Opacity" Value=".2" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="IsPressed" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="HoverArea" Property="Fill" Value="{DynamicResource {x:Static themes:ThemeResourceKeys.AppAccentBrushKey}}" />
                            <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static themes:ThemeResourceKeys.AppAccentBrushKey}}" />
                        </MultiTrigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="HoverArea" Property="Fill" Value="{DynamicResource {x:Static themes:ThemeResourceKeys.AppAccentBrushKey}}" />
                            <Setter TargetName="HoverArea" Property="Opacity" Value=".5" />
                            <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static themes:ThemeResourceKeys.AppAccentBrushKey}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
            </Trigger>
        </Style.Triggers>
    </Style>


    <Style x:Key="WindowButtonStyle" TargetType="Button">
        <Setter Property="WindowChrome.IsHitTestVisibleInChrome" Value="True" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="VerticalAlignment" Value="Top" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="UseLayoutRounding" Value="True" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="Width" Value="32" />
        <Setter Property="Height" Value="24" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">
                        <Grid>
                            <Rectangle x:Name="HoverArea" Fill="Transparent" />
                            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="IsPressed" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="HoverArea" Property="Fill" Value="{DynamicResource {x:Static themes:ThemeResourceKeys.WindowHeaderMouseOverBackgroundBrushKey}}" />
                        </MultiTrigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="HoverArea" Property="Fill" Value="{DynamicResource {x:Static themes:ThemeResourceKeys.WindowHeaderPressedBackgroundBrushKey}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MinimizeButtonStyle"
           BasedOn="{StaticResource WindowButtonStyle}"
           TargetType="Button">
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="Command" Value="ui:WindowCommands.Minimize" />
        <Setter Property="ToolTip" Value="{x:Static properties:Resources.Minimize}" />
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <Rectangle x:Name="Icon"
                               Width="10"
                               Height="10"
                               HorizontalAlignment="Center"
                               VerticalAlignment="Center"
                               Fill="{DynamicResource {x:Static themes:ThemeResourceKeys.WindowHeaderForegroundBrushKey}}"
                               Stretch="Uniform">
                        <Rectangle.OpacityMask>
                            <ImageBrush ImageSource="/Assets/minimize.png" />
                        </Rectangle.OpacityMask>
                    </Rectangle>
                    <DataTemplate.Triggers>
                        <DataTrigger Binding="{Binding IsPressed, RelativeSource={RelativeSource AncestorType=Button}}" Value="True">
                            <Setter TargetName="Icon" Property="Fill" Value="{DynamicResource {x:Static themes:ThemeResourceKeys.WindowHeaderPressedForegroundBrushKey}}" />
                        </DataTrigger>
                    </DataTemplate.Triggers>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MaximizeButtonStyle"
           BasedOn="{StaticResource WindowButtonStyle}"
           TargetType="Button">
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="Command" Value="{x:Static ui:WindowCommands.Maximize}" />
        <Setter Property="ToolTip" Value="{x:Static properties:Resources.Maximize}" />
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <Rectangle x:Name="Icon"
                               Width="10"
                               Height="10"
                               HorizontalAlignment="Center"
                               VerticalAlignment="Center"
                               Fill="{DynamicResource {x:Static themes:ThemeResourceKeys.WindowHeaderForegroundBrushKey}}"
                               Stretch="Uniform">
                        <Rectangle.OpacityMask>
                            <ImageBrush ImageSource="/Assets/maximize.png" />
                        </Rectangle.OpacityMask>
                    </Rectangle>
                    <DataTemplate.Triggers>
                        <DataTrigger Binding="{Binding IsPressed, RelativeSource={RelativeSource AncestorType=Button}}" Value="True">
                            <Setter TargetName="Icon" Property="Fill" Value="{DynamicResource {x:Static themes:ThemeResourceKeys.WindowHeaderPressedForegroundBrushKey}}" />
                        </DataTrigger>
                    </DataTemplate.Triggers>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="RestoreDownButtonStyle"
           BasedOn="{StaticResource WindowButtonStyle}"
           TargetType="Button">
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="Command" Value="{x:Static ui:WindowCommands.RestoreDown}" />
        <Setter Property="ToolTip" Value="{x:Static properties:Resources.RestoreDown}" />
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <Rectangle x:Name="Icon"
                               Width="10"
                               Height="10"
                               HorizontalAlignment="Center"
                               VerticalAlignment="Center"
                               Fill="{DynamicResource {x:Static themes:ThemeResourceKeys.WindowHeaderForegroundBrushKey}}"
                               Stretch="Uniform">
                        <Rectangle.OpacityMask>
                            <ImageBrush ImageSource="/Assets/restore.png" />
                        </Rectangle.OpacityMask>
                    </Rectangle>
                    <DataTemplate.Triggers>
                        <DataTrigger Binding="{Binding IsPressed, RelativeSource={RelativeSource AncestorType=Button}}" Value="True">
                            <Setter TargetName="Icon" Property="Fill" Value="{DynamicResource {x:Static themes:ThemeResourceKeys.WindowHeaderPressedForegroundBrushKey}}" />
                        </DataTrigger>
                    </DataTemplate.Triggers>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="CloseButtonStyle"
           BasedOn="{StaticResource WindowButtonStyle}"
           TargetType="Button">
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="Command" Value="{x:Static ApplicationCommands.Close}" />
        <Setter Property="ToolTip" Value="{x:Static properties:Resources.Close}" />
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <Rectangle x:Name="Icon"
                               Width="10"
                               Height="10"
                               HorizontalAlignment="Center"
                               VerticalAlignment="Center"
                               Fill="{DynamicResource {x:Static themes:ThemeResourceKeys.WindowHeaderForegroundBrushKey}}"
                               Stretch="Uniform">
                        <Rectangle.OpacityMask>
                            <ImageBrush ImageSource="/Assets/close.png" />
                        </Rectangle.OpacityMask>
                    </Rectangle>
                    <DataTemplate.Triggers>
                        <DataTrigger Binding="{Binding IsPressed, RelativeSource={RelativeSource AncestorType=Button}}" Value="True">
                            <Setter TargetName="Icon" Property="Fill" Value="{DynamicResource {x:Static themes:ThemeResourceKeys.WindowHeaderPressedForegroundBrushKey}}" />
                        </DataTrigger>
                    </DataTemplate.Triggers>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="HelpButtonStyle"
           BasedOn="{StaticResource WindowButtonStyle}"
           TargetType="Button">
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="Command" Value="{x:Static ApplicationCommands.Help}" />
        <Setter Property="ToolTip" Value="{x:Static properties:Resources.Help}" />
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <Rectangle x:Name="Icon"
                               Width="10"
                               Height="10"
                               HorizontalAlignment="Center"
                               VerticalAlignment="Center"
                               Fill="{DynamicResource {x:Static themes:ThemeResourceKeys.WindowHeaderForegroundBrushKey}}"
                               Stretch="Uniform">
                        <Rectangle.OpacityMask>
                            <ImageBrush ImageSource="/Assets/help.png" />
                        </Rectangle.OpacityMask>
                    </Rectangle>
                    <DataTemplate.Triggers>
                        <DataTrigger Binding="{Binding IsPressed, RelativeSource={RelativeSource AncestorType=Button}}" Value="True">
                            <Setter TargetName="Icon" Property="Fill" Value="{DynamicResource {x:Static themes:ThemeResourceKeys.WindowHeaderPressedForegroundBrushKey}}" />
                        </DataTrigger>
                    </DataTemplate.Triggers>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="StatusBarButtonStyle"
           BasedOn="{StaticResource {x:Type Button}}"
           TargetType="Button">
        <Setter Property="MinWidth" Value="50" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static themes:ThemeResourceKeys.AppForegroundBrushKey}}" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Margin" Value="0" />
        <Setter Property="FontSize" Value="{DynamicResource {x:Static themes:ThemeResourceKeys.AppMediumFontSizeKey}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ButtonBase">
                    <Border Margin="{TemplateBinding Margin}"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Padding="{TemplateBinding Padding}">
                        <TextBlock HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                   VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                   FontSize="{TemplateBinding FontSize}"
                                   Foreground="{TemplateBinding Foreground}"
                                   Text="{TemplateBinding Content}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsPressed" Value="True" />
                    <Condition Property="IsMouseOver" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="#66000000" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True" />
                    <Condition Property="IsPressed" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="#33000000" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="SortingPropertyButtonStyle"
           BasedOn="{StaticResource {x:Type Button}}"
           TargetType="Button">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static themes:ThemeResourceKeys.AppSecondaryForegroundBrushKey}}" />
        <Setter Property="FontSize" Value="{DynamicResource {x:Static themes:ThemeResourceKeys.AppMediumFontSizeKey}}" />
        <Setter Property="Content" Value="{x:Static properties:Resources.Descending}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <StackPanel Orientation="Horizontal">
                        <TextBlock Margin="3,0"
                                   VerticalAlignment="Center"
                                   FontSize="{TemplateBinding FontSize}"
                                   Foreground="{TemplateBinding Foreground}"
                                   Text="{TemplateBinding Content}" />
                    </StackPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource {x:Static themes:ThemeResourceKeys.AppAccentBrushKey}}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="EditorButtonStyle"
           BasedOn="{StaticResource {x:Type Button}}"
           TargetType="Button">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="Height" Value="26" />
        <Setter Property="Width" Value="26" />
        <Setter Property="Margin" Value="0" />
        <Setter Property="IsTabStop" Value="False" />
    </Style>

</ResourceDictionary>