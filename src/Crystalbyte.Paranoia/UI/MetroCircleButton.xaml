<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:converters="clr-namespace:Crystalbyte.Paranoia.UI.Converters"
                    xmlns:properties="clr-namespace:Crystalbyte.Paranoia.Properties"
                    xmlns:ui="clr-namespace:Crystalbyte.Paranoia.UI">

    <converters:NullToVisibilityConverter x:Key="NullToVisibilityConverter" />

    <Style TargetType="ui:MetroCircleButton">
        <Setter Property="Foreground" Value="{DynamicResource {ComponentResourceKey {x:Type properties:Resources}, Metro.NormalTextBrush}}" />
        <Setter Property="Margin" Value="6" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <!--
            <Setter Property="BorderBrush"
            Value="{DynamicResource {ComponentResourceKey {x:Type properties:Resources}, Metro.NormalTextBrush}}" />
        -->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ui:MetroCircleButton">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <Rectangle Grid.Row="0"
                                   Grid.Column="0"
                                   Grid.ColumnSpan="2"
                                   Fill="Transparent" />
                        <Ellipse x:Name="Ellipse"
                                 Grid.Column="0"
                                 Width="32"
                                 Height="32"
                                 HorizontalAlignment="Center"
                                 VerticalAlignment="Center"
                                 Fill="{TemplateBinding Background}"
                                 Stroke="{TemplateBinding BorderBrush}"
                                 StrokeThickness="1.4" />
                        <ContentPresenter Name="Presenter"
                                          Grid.Column="0"
                                          HorizontalAlignment="Center"
                                          VerticalAlignment="Center"
                                          RenderOptions.BitmapScalingMode="HighQuality" />
                        <TextBlock x:Name="TextBlock"
                                   Grid.Column="1"
                                   Margin="6,-2,0,0"
                                   VerticalAlignment="Center"
                                   FontSize="{DynamicResource {ComponentResourceKey {x:Type properties:Resources},
                                                                                    Metro.MediumFontSize}}"
                                   Foreground="{TemplateBinding Foreground}"
                                   Text="{TemplateBinding Text}"
                                   Visibility="{Binding Text,
                                                        RelativeSource={RelativeSource TemplatedParent},
                                                        Converter={StaticResource NullToVisibilityConverter}}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Presenter" Property="Opacity" Value=".2" />
                            <Setter TargetName="Ellipse" Property="Opacity" Value=".2" />
                            <Setter TargetName="TextBlock" Property="Foreground" Value="{DynamicResource {ComponentResourceKey {x:Type properties:Resources}, Metro.DisabledBrush}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True" />
                    <Condition Property="IsPressed" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="Transparent" />
                <Setter Property="BorderBrush" Value="{DynamicResource {ComponentResourceKey {x:Type properties:Resources}, Metro.AccentBrush}}" />
                <Setter Property="Foreground" Value="{DynamicResource {ComponentResourceKey {x:Type properties:Resources}, Metro.AccentBrush}}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True" />
                    <Condition Property="IsPressed" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource {ComponentResourceKey {x:Type properties:Resources}, Metro.AccentBrush}}" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>
</ResourceDictionary>