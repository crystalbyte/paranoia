<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:themes="clr-namespace:Crystalbyte.Paranoia.Themes;assembly=Crystalbyte.Paranoia.Themes">

    <Style TargetType="ToggleButton">
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="Background" Value="{DynamicResource {x:Static themes:ThemeResourceKeys.ButtonBackgroundBrushKey}}" />
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static themes:ThemeResourceKeys.ButtonBorderBrushKey}}" />
        <Setter Property="Padding" Value="{DynamicResource {x:Static themes:ThemeResourceKeys.ButtonPaddingKey}}" />
        <Setter Property="BorderThickness" Value="{DynamicResource {x:Static themes:ThemeResourceKeys.ButtonBorderThicknessKey}}" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">
                        <ContentPresenter Margin="{TemplateBinding Padding}"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          Content="{TemplateBinding Content}"
                                          ContentTemplate="{TemplateBinding ContentTemplate}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Background" Value="{DynamicResource {x:Static themes:ThemeResourceKeys.AppAccentBrushKey}}" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsChecked" Value="False" />
                    <Condition Property="IsMouseOver" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource {x:Static themes:ThemeResourceKeys.ButtonMouseOverBackgroundBrushKey}}" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>

    <!--
        <Style x:Key="Metro.ListViewToggleButtonStyle"
        BasedOn="{StaticResource {x:Type ToggleButton}}"
        TargetType="ToggleButton">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Margin" Value="0,1,0,0" />
        <Setter Property="WindowChrome.IsHitTestVisibleInChrome" Value="True" />
        <Setter Property="Padding" Value="8,1,8,1" />
        </Style>
    -->

    <!--
        <Style x:Key="Metro.SortingToggleButtonStyle" TargetType="ToggleButton">
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="{DynamicResource Metro.App.AccentBrush}" />
        <Setter Property="Content" Value="{x:Static properties:Resources.Descending}" />
        <Setter Property="Template">
        <Setter.Value>
        <ControlTemplate TargetType="ToggleButton">
        <Border Background="{TemplateBinding Background}"
        BorderBrush="{TemplateBinding BorderBrush}"
        BorderThickness="{TemplateBinding BorderThickness}">
        <Grid>
        <Grid.ColumnDefinitions>
        <ColumnDefinition Width="*" />
        <ColumnDefinition Width="Auto" />
        </Grid.ColumnDefinitions>
        <TextBlock Grid.Column="0"
        Margin="{TemplateBinding Padding}"
        HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
        VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
        Foreground="{TemplateBinding Foreground}"
        Text="{TemplateBinding Content}" />
        <StackPanel Grid.Column="1"
        Margin="6,0,0,0"
        VerticalAlignment="Center">
        <Polygon Margin="0,3,0,0"
        Fill="{TemplateBinding Foreground}"
        Points="0,0 10,0, 5,6"
        Stroke="{TemplateBinding Foreground}"
        Visibility="{Binding IsChecked,
        RelativeSource={RelativeSource TemplatedParent},
        Converter={StaticResource BooleanToVisibilityConverter},
        ConverterParameter=!}" />
        <Polygon Margin="0,1,0,0"
        Fill="{TemplateBinding Foreground}"
        Points="0,6 10,6, 5,0"
        Stroke="{TemplateBinding Foreground}"
        Visibility="{Binding IsChecked,
        RelativeSource={RelativeSource TemplatedParent},
        Converter={StaticResource BooleanToVisibilityConverter}}" />
        </StackPanel>
        </Grid>
        </Border>
        </ControlTemplate>
        </Setter.Value>
        </Setter>
        <Style.Triggers>
        <Trigger Property="IsChecked" Value="True">
        <Setter Property="Content" Value="{x:Static properties:Resources.Ascending}" />
        </Trigger>
        </Style.Triggers>
        </Style>
    -->

</ResourceDictionary>