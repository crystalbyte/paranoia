<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:themes="clr-namespace:Crystalbyte.Paranoia.Themes;assembly=Crystalbyte.Paranoia.Themes">

    <SolidColorBrush x:Key="{x:Static themes:ThemeResourceKeys.MenuIconBrushKey}" Color="#4D4D4E" />
    <SolidColorBrush x:Key="{x:Static themes:ThemeResourceKeys.MenuBackgroundBrushKey}" Color="White" />
    <SolidColorBrush x:Key="{x:Static themes:ThemeResourceKeys.MenuBorderBrushKey}" Color="#8D8D8E" />
    <SolidColorBrush x:Key="{x:Static themes:ThemeResourceKeys.MenuGlyphBrushKey}" Color="#5D5D5E" />
    <SolidColorBrush x:Key="{x:Static themes:ThemeResourceKeys.MenuSeparatorBrushKey}" Color="#CCCCCC" />

    <Thickness x:Key="{x:Static themes:ThemeResourceKeys.MenuBorderThicknessKey}">1</Thickness>

    <MenuScrollingVisibilityConverter x:Key="MenuScrollingVisibilityConverter" />
    <Geometry x:Key="DownArrow">M 0,0 L 3.5,4 L 7,0 Z</Geometry>
    <Geometry x:Key="UpArrow">M 0,4 L 3.5,0 L 7,4 Z</Geometry>
    <Geometry x:Key="RightArrow">M 0,0 L 4,3.5 L 0,7 Z</Geometry>

    <!--  SimpleStyles: Menu  -->
    <Style TargetType="Menu">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Menu}">
                    <Border Background="{DynamicResource {x:Static themes:ThemeResourceKeys.MenuBackgroundBrushKey}}"
                            BorderBrush="{DynamicResource {x:Static themes:ThemeResourceKeys.MenuBorderBrushKey}}"
                            BorderThickness="{DynamicResource {x:Static themes:ThemeResourceKeys.MenuBorderThicknessKey}}">
                        <StackPanel ClipToBounds="True"
                                    IsItemsHost="True"
                                    Orientation="Horizontal" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  SimpleStyles: ContextMenu  -->

    <Style TargetType="ContextMenu">
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Grid.IsSharedSizeScope" Value="true" />
        <Setter Property="HasDropShadow" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContextMenu}">
                    <Border Name="Border"
                            Background="{DynamicResource {x:Static themes:ThemeResourceKeys.MenuBackgroundBrushKey}}"
                            BorderBrush="{DynamicResource {x:Static themes:ThemeResourceKeys.MenuBorderBrushKey}}"
                            BorderThickness="{DynamicResource {x:Static themes:ThemeResourceKeys.MenuBorderThicknessKey}}">
                        <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasDropShadow" Value="true">
                            <Setter TargetName="Border" Property="Padding" Value="0,3,0,3" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  SimpleStyles: MenuItem  -->
    <Style x:Key="{x:Static MenuItem.SeparatorStyleKey}" TargetType="Separator">
        <Setter Property="Height" Value="1" />
        <Setter Property="UseLayoutRounding" Value="True" />
        <Setter Property="Margin" Value="2,3" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Separator}">
                    <Border BorderBrush="{DynamicResource {x:Static themes:ThemeResourceKeys.MenuSeparatorBrushKey}}" BorderThickness="1" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MenuScrollButton"
           BasedOn="{x:Null}"
           TargetType="{x:Type RepeatButton}">
        <Setter Property="ClickMode" Value="Hover" />
        <Setter Property="MinWidth" Value="0" />
        <Setter Property="MinHeight" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <DockPanel Background="Transparent" SnapsToDevicePixels="true">
                        <!--  right  -->
                        <Rectangle x:Name="R1"
                                   Width="1"
                                   DockPanel.Dock="Right"
                                   Fill="Transparent" />
                        <!--  bottom  -->
                        <Rectangle x:Name="B1"
                                   Height="1"
                                   DockPanel.Dock="Bottom"
                                   Fill="Transparent" />
                        <!--  left  -->
                        <Rectangle x:Name="L1"
                                   Width="1"
                                   DockPanel.Dock="Left"
                                   Fill="Transparent" />
                        <!--  top  -->
                        <Rectangle x:Name="T1"
                                   Height="1"
                                   DockPanel.Dock="Top"
                                   Fill="Transparent" />
                        <ContentPresenter x:Name="ContentContainer"
                                          Margin="2,2,2,2"
                                          HorizontalAlignment="Center"
                                          VerticalAlignment="Center" />
                    </DockPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="R1" Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" />
                            <Setter TargetName="B1" Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" />
                            <Setter TargetName="L1" Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}" />
                            <Setter TargetName="T1" Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}" />
                            <Setter TargetName="ContentContainer" Property="Margin" Value="3,3,1,1" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MenuScrollViewer"
           BasedOn="{x:Null}"
           TargetType="{x:Type ScrollViewer}">
        <Setter Property="HorizontalScrollBarVisibility" Value="Hidden" />
        <Setter Property="VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="Template">
            <Setter.Value>
                <!--  ScrollViewer for a MenuItem  -->
                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                    <Grid SnapsToDevicePixels="True">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="*" />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>
                        <RepeatButton Grid.Row="0"
                                      Grid.Column="0"
                                      Command="{x:Static ScrollBar.LineUpCommand}"
                                      CommandTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}"
                                      Focusable="False"
                                      Style="{StaticResource MenuScrollButton}">
                            <RepeatButton.Visibility>
                                <MultiBinding Converter="{StaticResource MenuScrollingVisibilityConverter}"
                                              ConverterParameter="0"
                                              FallbackValue="Visibility.Collapsed">
                                    <Binding Path="ComputedVerticalScrollBarVisibility" RelativeSource="{RelativeSource TemplatedParent}" />
                                    <Binding Path="VerticalOffset" RelativeSource="{RelativeSource TemplatedParent}" />
                                    <Binding Path="ExtentHeight" RelativeSource="{RelativeSource TemplatedParent}" />
                                    <Binding Path="ViewportHeight" RelativeSource="{RelativeSource TemplatedParent}" />
                                </MultiBinding>
                            </RepeatButton.Visibility>
                            <Path Data="{StaticResource UpArrow}" Fill="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}" />
                        </RepeatButton>
                        <Border Grid.Row="1" Grid.Column="0">
                            <ScrollContentPresenter Margin="{TemplateBinding Padding}" />
                        </Border>
                        <RepeatButton Grid.Row="2"
                                      Grid.Column="0"
                                      Command="{x:Static ScrollBar.LineDownCommand}"
                                      CommandTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}"
                                      Focusable="False"
                                      Style="{StaticResource MenuScrollButton}">
                            <RepeatButton.Visibility>
                                <MultiBinding Converter="{StaticResource MenuScrollingVisibilityConverter}"
                                              ConverterParameter="100"
                                              FallbackValue="Visibility.Collapsed">
                                    <Binding Path="ComputedVerticalScrollBarVisibility" RelativeSource="{RelativeSource TemplatedParent}" />
                                    <Binding Path="VerticalOffset" RelativeSource="{RelativeSource TemplatedParent}" />
                                    <Binding Path="ExtentHeight" RelativeSource="{RelativeSource TemplatedParent}" />
                                    <Binding Path="ViewportHeight" RelativeSource="{RelativeSource TemplatedParent}" />
                                </MultiBinding>
                            </RepeatButton.Visibility>
                            <Path Data="{StaticResource DownArrow}" Fill="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}" />
                        </RepeatButton>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  TopLevelHeader  -->
    <ControlTemplate x:Key="{x:Static MenuItem.TopLevelHeaderTemplateKey}" TargetType="{x:Type MenuItem}">
        <Border Name="Border">
            <Grid>
                <ContentPresenter Margin="6,3,6,3"
                                  VerticalAlignment="Center"
                                  ContentSource="Header"
                                  RecognizesAccessKey="True" />
                <Popup Name="Popup"
                       AllowsTransparency="True"
                       Focusable="False"
                       IsOpen="{TemplateBinding IsSubmenuOpen}"
                       Placement="Bottom"
                       PopupAnimation="Fade">
                    <Border Name="SubmenuBorder"
                            Background="{DynamicResource {x:Static themes:ThemeResourceKeys.MenuBackgroundBrushKey}}"
                            BorderBrush="{DynamicResource {x:Static themes:ThemeResourceKeys.MenuBorderBrushKey}}"
                            BorderThickness="{DynamicResource {x:Static themes:ThemeResourceKeys.MenuBorderThicknessKey}}"
                            SnapsToDevicePixels="True">
                        <ScrollViewer CanContentScroll="True" Style="{StaticResource MenuScrollViewer}">
                            <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle" />
                        </ScrollViewer>
                    </Border>
                </Popup>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsSuspendingPopupAnimation" Value="true">
                <Setter TargetName="Popup" Property="PopupAnimation" Value="None" />
            </Trigger>
            <Trigger Property="IsHighlighted" Value="true">
                <Setter TargetName="Border" Property="Background" Value="{DynamicResource {x:Static themes:ThemeResourceKeys.AppAccentBrushKey}}" />
                <Setter TargetName="Border" Property="BorderBrush" Value="Transparent" />
            </Trigger>
            <!--  Snippettoplevelheader  -->
            <Trigger SourceName="Popup" Property="Popup.AllowsTransparency" Value="True">
                <Setter TargetName="SubmenuBorder" Property="CornerRadius" Value="0,0,4,4" />
                <Setter TargetName="SubmenuBorder" Property="Padding" Value="0,0,0,3" />
            </Trigger>
            <!--  /Snippettoplevelheader  -->
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource {x:Static themes:ThemeResourceKeys.ControlDisabledForegroundBrushKey}}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!--  TopLevelItem  -->
    <ControlTemplate x:Key="{x:Static MenuItem.TopLevelItemTemplateKey}" TargetType="{x:Type MenuItem}">
        <Grid>
            <Rectangle x:Name="HoverBackground"
                       Fill="Transparent"
                       Opacity=".2" />
            <ContentPresenter Margin="6,3,6,3"
                              VerticalAlignment="Center"
                              ContentSource="Header"
                              RecognizesAccessKey="True" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsHighlighted" Value="true">
                <Setter TargetName="HoverBackground" Property="Fill" Value="{DynamicResource {x:Static themes:ThemeResourceKeys.AppAccentBrushKey}}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource {x:Static themes:ThemeResourceKeys.ControlDisabledForegroundBrushKey}}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!--  SubmenuItem  -->
    <ControlTemplate x:Key="{x:Static MenuItem.SubmenuItemTemplateKey}" TargetType="{x:Type MenuItem}">
        <Border Name="Border">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" SharedSizeGroup="Icon" />
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="Auto" SharedSizeGroup="Shortcut" />
                    <ColumnDefinition Width="13" />
                </Grid.ColumnDefinitions>
                <Rectangle x:Name="HoverBackground"
                           Grid.ColumnSpan="4"
                           Fill="Transparent"
                           Opacity=".2" />
                <ContentPresenter Name="Icon"
                                  Grid.Column="0"
                                  Margin="6,0,6,0"
                                  VerticalAlignment="Center"
                                  ContentSource="Icon" />
                <Border Name="Check"
                        Grid.Column="0"
                        Width="13"
                        Height="13"
                        Margin="6,0,6,0"
                        Background="{DynamicResource {x:Static themes:ThemeResourceKeys.CheckBoxBackgroundBrushKey}}"
                        BorderBrush="{DynamicResource {x:Static themes:ThemeResourceKeys.CheckBoxBorderBrushKey}}"
                        BorderThickness="{DynamicResource {x:Static themes:ThemeResourceKeys.CheckBoxBorderThicknessKey}}"
                        Visibility="Collapsed">
                    <Path Name="CheckMark"
                          Width="7"
                          Height="7"
                          Data="M 0 0 L 7 7 M 0 7 L 7 0"
                          SnapsToDevicePixels="False"
                          Stroke="{DynamicResource {x:Static themes:ThemeResourceKeys.MenuGlyphBrushKey}}"
                          StrokeThickness="2"
                          Visibility="Hidden" />
                </Border>
                <ContentPresenter Name="HeaderHost"
                                  Grid.Column="1"
                                  MinWidth="50"
                                  VerticalAlignment="Center"
                                  ContentSource="Header"
                                  RecognizesAccessKey="True" />
                <TextBlock x:Name="InputGestureText"
                           Grid.Column="2"
                           Margin="5,2,0,2"
                           DockPanel.Dock="Right"
                           Text="{TemplateBinding InputGestureText}" />
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="Icon" Value="{x:Null}">
                <Setter TargetName="Icon" Property="Visibility" Value="Hidden" />
            </Trigger>
            <Trigger Property="IsChecked" Value="true">
                <Setter TargetName="CheckMark" Property="Visibility" Value="Visible" />
            </Trigger>
            <Trigger Property="IsCheckable" Value="true">
                <Setter TargetName="Check" Property="Visibility" Value="Visible" />
                <Setter TargetName="Icon" Property="Visibility" Value="Hidden" />
            </Trigger>
            <Trigger Property="IsHighlighted" Value="true">
                <Setter TargetName="HoverBackground" Property="Fill" Value="{DynamicResource {x:Static themes:ThemeResourceKeys.AppAccentBrushKey}}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Foreground" Value="{DynamicResource {x:Static themes:ThemeResourceKeys.ControlDisabledForegroundBrushKey}}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!--  SubmenuHeader  -->
    <ControlTemplate x:Key="{x:Static MenuItem.SubmenuHeaderTemplateKey}" TargetType="MenuItem">
        <Border Name="Border">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" SharedSizeGroup="Icon" />
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="Auto" SharedSizeGroup="Shortcut" />
                    <ColumnDefinition Width="13" />
                </Grid.ColumnDefinitions>
                <Rectangle x:Name="HoverBackground"
                           Grid.ColumnSpan="4"
                           Fill="Transparent"
                           Opacity=".2" />
                <ContentPresenter Name="Icon"
                                  Grid.Column="0"
                                  Margin="6,0,6,0"
                                  VerticalAlignment="Center"
                                  ContentSource="Icon" />
                <Popup Name="Popup"
                       Grid.Column="0"
                       AllowsTransparency="True"
                       Focusable="False"
                       HorizontalOffset="-4"
                       IsOpen="{TemplateBinding IsSubmenuOpen}"
                       Placement="Right"
                       PopupAnimation="Fade">
                    <Border Name="SubmenuBorder"
                            Background="{DynamicResource {x:Static themes:ThemeResourceKeys.MenuBackgroundBrushKey}}"
                            BorderBrush="{DynamicResource {x:Static themes:ThemeResourceKeys.MenuBorderBrushKey}}"
                            BorderThickness="{DynamicResource {x:Static themes:ThemeResourceKeys.MenuBorderThicknessKey}}"
                            SnapsToDevicePixels="True">
                        <ScrollViewer CanContentScroll="True" Style="{StaticResource MenuScrollViewer}">
                            <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle" />
                        </ScrollViewer>
                    </Border>
                </Popup>
                <ContentPresenter Name="HeaderHost"
                                  Grid.Column="1"
                                  MinWidth="50"
                                  ContentSource="Header"
                                  RecognizesAccessKey="True" />
                <TextBlock x:Name="InputGestureText"
                           Grid.Column="2"
                           Margin="5,2,2,2"
                           DockPanel.Dock="Right"
                           Text="{TemplateBinding InputGestureText}" />
                <Path Grid.Column="3"
                      HorizontalAlignment="Center"
                      VerticalAlignment="Center"
                      Data="M 0 0 L 0 7 L 4 3.5 Z"
                      Fill="{DynamicResource {x:Static themes:ThemeResourceKeys.MenuGlyphBrushKey}}" />
            </Grid>
        </Border>

        <ControlTemplate.Triggers>
            <Trigger Property="Icon" Value="{x:Null}">
                <Setter TargetName="Icon" Property="Visibility" Value="Collapsed" />
            </Trigger>
            <Trigger Property="IsHighlighted" Value="true">
                <Setter TargetName="HoverBackground" Property="Fill" Value="{DynamicResource {x:Static themes:ThemeResourceKeys.AppAccentBrushKey}}" />
            </Trigger>
            <Trigger SourceName="Popup" Property="Popup.AllowsTransparency" Value="True">
                <Setter TargetName="SubmenuBorder" Property="Padding" Value="0,3,0,3" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Foreground" Value="{DynamicResource {x:Static themes:ThemeResourceKeys.ControlDisabledForegroundBrushKey}}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!--  MenuItem Style  -->
    <Style TargetType="MenuItem">
        <Setter Property="FontFamily" Value="{DynamicResource {x:Static themes:ThemeResourceKeys.TextFontFamilyKey}}" />
        <Setter Property="FontSize" Value="{DynamicResource {x:Static themes:ThemeResourceKeys.TextMediumFontSizeKey}}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static themes:ThemeResourceKeys.TextForegroundBrushKey}}" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Style.Triggers>
            <Trigger Property="Role" Value="TopLevelHeader">
                <Setter Property="Template" Value="{StaticResource {x:Static MenuItem.TopLevelHeaderTemplateKey}}" />
                <Setter Property="Grid.IsSharedSizeScope" Value="true" />
            </Trigger>
            <Trigger Property="Role" Value="TopLevelItem">
                <Setter Property="Template" Value="{StaticResource {x:Static MenuItem.TopLevelItemTemplateKey}}" />
            </Trigger>
            <Trigger Property="Role" Value="SubmenuHeader">
                <Setter Property="Template" Value="{StaticResource {x:Static MenuItem.SubmenuHeaderTemplateKey}}" />
            </Trigger>
            <Trigger Property="Role" Value="SubmenuItem">
                <Setter Property="Template" Value="{StaticResource {x:Static MenuItem.SubmenuItemTemplateKey}}" />
            </Trigger>
        </Style.Triggers>
    </Style>

</ResourceDictionary>