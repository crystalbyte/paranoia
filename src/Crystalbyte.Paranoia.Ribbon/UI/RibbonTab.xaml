<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:converters="clr-namespace:Crystalbyte.Paranoia.Converters"
                    xmlns:ui="clr-namespace:Crystalbyte.Paranoia.UI">

    <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
    <converters:RibbonStateToVisibilityConverter x:Key="RibbonStateToVisibilityConverter" />
    <converters:NullToVisibleConverter x:Key="NullToVisibleConverter" />

    <Style TargetType="ui:RibbonTab">
        <Setter Property="BorderThickness" Value="1,1,1,0" />
        <Setter Property="Background" Value="{Binding Background, RelativeSource={RelativeSource FindAncestor, AncestorType=ui:RibbonWindow, AncestorLevel=1}}" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Margin" Value="1,0,1,0" />
        <Setter Property="BorderBrush" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly=ui:RibbonWindow, ResourceId=WindowBackgroundBrush}}" />
        <Setter Property="HeaderTemplate">
            <Setter.Value>
                <DataTemplate>
                    <TextBlock Margin="{DynamicResource {ComponentResourceKey TypeInTargetAssembly=ui:RibbonWindow,
                                                                              ResourceId=HeaderPadding}}"
                               RenderOptions.ClearTypeHint="Enabled"
                               Text="{Binding}" />
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ui:RibbonTab">
                    <Grid Background="{x:Null}">
                        <Rectangle Margin="0,-23,0,0"
                                   VerticalAlignment="Stretch"
                                   Fill="{TemplateBinding ContextualBrush}"
                                   RenderOptions.EdgeMode="Aliased"
                                   SnapsToDevicePixels="True"
                                   StrokeThickness="0"
                                   Visibility="{Binding IsContextual,
                                                        RelativeSource={RelativeSource TemplatedParent},
                                                        Converter={StaticResource BooleanToVisibilityConverter}}" />
                        <Rectangle Margin="0,-19,0,0"
                                   VerticalAlignment="Stretch"
                                   Fill="{TemplateBinding Background}"
                                   Opacity=".8"
                                   RenderOptions.EdgeMode="Aliased"
                                   SnapsToDevicePixels="True"
                                   StrokeThickness="0"
                                   Visibility="{Binding IsContextual,
                                                        RelativeSource={RelativeSource TemplatedParent},
                                                        Converter={StaticResource BooleanToVisibilityConverter}}" />
                        <TextBlock Margin="0,-17,0,0"
                                   HorizontalAlignment="Center"
                                   FontSize="11"
                                   Foreground="{TemplateBinding ContextualBrush}"
                                   Text="{TemplateBinding ContextualText}"
                                   Visibility="{Binding IsContextual,
                                                        RelativeSource={RelativeSource TemplatedParent},
                                                        Converter={StaticResource BooleanToVisibilityConverter}}" />
                        <Grid x:Name="TabHeaderBackground"
                              Background="Transparent"
                              SnapsToDevicePixels="True">
                            <Border x:Name="SelectionBorder"
                                    Background="Transparent"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="{TemplateBinding BorderThickness}"
                                    Visibility="{TemplateBinding IsSelected,
                                                                 Converter={StaticResource BooleanToVisibilityConverter}}" />
                            <Border x:Name="NoSelectionBorder"
                                    Background="Transparent"
                                    BorderBrush="{DynamicResource {ComponentResourceKey TypeInTargetAssembly=ui:RibbonWindow,
                                                                                        ResourceId=RibbonBorderBrush}}"
                                    BorderThickness="0"
                                    Visibility="{Binding IsCommandStripVisible,
                                                         RelativeSource={RelativeSource FindAncestor,
                                                                                        AncestorType=ui:Ribbon,
                                                                                        AncestorLevel=1},
                                                         Converter={StaticResource BooleanToVisibilityConverter}}" />
                            <Border Background="Transparent"
                                    BorderBrush="Transparent"
                                    BorderThickness="{TemplateBinding BorderThickness}">
                                <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                                  Content="{TemplateBinding Header}"
                                                  ContentTemplate="{TemplateBinding HeaderTemplate}" />
                            </Border>
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="False">
                            <Setter TargetName="NoSelectionBorder" Property="BorderThickness" Value="0,0,0,1" />
                        </Trigger>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="TabHeaderBackground" Property="Background" Value="{Binding Background, RelativeSource={RelativeSource FindAncestor, AncestorType=ui:RibbonTab, AncestorLevel=1}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsSelected" Value="True" />
                    <Condition Property="IsContextual" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="BorderBrush" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly=ui:RibbonWindow, ResourceId=RibbonBorderBrush}}" />
                <Setter Property="Foreground" Value="{Binding ContextualBrush, RelativeSource={RelativeSource Self}}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsSelected" Value="True" />
                    <Condition Property="IsContextual" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="BorderBrush" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly=ui:RibbonWindow, ResourceId=RibbonBorderBrush}}" />
                <Setter Property="Foreground" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly=ui:RibbonWindow, ResourceId=WindowAccentBrush}}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True" />
                    <Condition Property="IsContextual" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="Foreground" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly=ui:RibbonWindow, ResourceId=WindowAccentBrush}}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True" />
                    <Condition Property="IsContextual" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="Foreground" Value="{Binding ContextualBrush, RelativeSource={RelativeSource Self}}" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>
</ResourceDictionary>